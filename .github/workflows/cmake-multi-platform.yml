# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: 'CMake on multiple platforms'

on:
  workflow_dispatch:
  #push:
   # branches: [ "main" ]

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
  
  build:
    needs: create_release
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-latest,  macos-latest, windows-latest]
        build_type: [Release]
        include:
        - os: ubuntu-latest
          c_compiler: gcc
          cpp_compiler: g++
        - os: macos-latest
          c_compiler: clang
          cpp_compiler: clang++
        - os: windows-latest
          c_compiler: cl
          cpp_compiler: cl       

    steps:
    - uses: actions/checkout@v4  
        
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/source

 
    - name: Build and Install
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target install        


      ###########################   Upload Release   #########################################################
    - name: Prepare directories and copy files (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $buildOutputDir = "${{ steps.strings.outputs.build-output-dir }}"
        $releaseDir = Join-Path -Path $buildOutputDir -ChildPath 'release_win'
        $clientDir = Join-Path -Path $releaseDir -ChildPath 'client'
        $libraryDir = Join-Path -Path $releaseDir -ChildPath 'library'
        
        # cоздание директорий
        New-Item -ItemType Directory -Force -Path $clientDir
        New-Item -ItemType Directory -Force -Path $libraryDir
        
        # Копирование файлов и директорий
        Copy-Item -Recurse -Force -Path (Join-Path -Path $buildOutputDir -ChildPath 'Release\*') -Destination $clientDir

        Copy-Item -Recurse -Force -Path (Join-Path -Path $buildOutputDir -ChildPath 'async\include') -Destination $libraryDir
        Copy-Item -Recurse -Force -Path (Join-Path -Path $buildOutputDir -ChildPath 'async\lib') -Destination $libraryDir
        Copy-Item -Recurse -Force -Path (Join-Path -Path $buildOutputDir -ChildPath 'async\bin') -Destination $libraryDir

    - name: Archive files (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $buildOutputDir = "${{ steps.strings.outputs.build-output-dir }}"
        $releaseDir = Join-Path -Path $buildOutputDir -ChildPath 'release'
        $archivePath = Join-Path -Path $buildOutputDir -ChildPath 'async.zip'
        
        Compress-Archive -Path $clientDir, $libraryDir -DestinationPath $archivePath -Force

       
    - name: Prepare directories for archiving (Ubuntu & macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}/release/client
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}/release/library
        cp -r ${{ steps.strings.outputs.build-output-dir }}/async_cli ${{ steps.strings.outputs.build-output-dir }}/release/client/
        find "${{ steps.strings.outputs.build-output-dir }}" -name 'lib*' -exec cp {} "${{ steps.strings.outputs.build-output-dir }}/release/client/" \;

        cp -r ${{ steps.strings.outputs.build-output-dir }}/async/include ${{ steps.strings.outputs.build-output-dir }}/release/library/
        cp -r ${{ steps.strings.outputs.build-output-dir }}/async/lib ${{ steps.strings.outputs.build-output-dir }}/release/library/
        cp -r ${{ steps.strings.outputs.build-output-dir }}/async/bin ${{ steps.strings.outputs.build-output-dir }}/release/library/
        
    - name: Archive client files (Ubuntu & macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}/release
        tar -czf async.tar.gz client library


    - name: Upload Release Asset (Ubuntu & macOS)
      if: ${{ success() && matrix.os != 'windows-latest' }}    
      id: upload-release-asset-client
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/release/async.tar.gz
        asset_name: async-${{ matrix.os }}-0.0.${{ github.run_number }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: ${{ success() && matrix.os == 'windows-latest' }}
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}\async.zip
        asset_name: async-${{ matrix.os }}-0.0.${{ github.run_number }}.zip
        asset_content_type: application/zip